(items-at adds the kth item from several arrays to the stack) {[[4 5 6] [7 8 9]] 1 items-at} [5 8] assert-stack
(sum reduce over an array should give the sum) {[5 3 2] {add} reduce} [10] assert-stack
(mul reduce over an array should give the product) {[5 3 2] {mul} reduce} [30] assert-stack
(sum zipwith should be elementwise sum) {[5 3 2] [8 3 1] {add} 2 zipwith} [[13 6 3]] assert-stack
(pair zipwith should be elementwise pair) {[5 3 2] [8 3 1] {2 array astore} 2 zipwith} [[[5 8] [3 3] [2 1]]] assert-stack
(triples zipwith should be elementwise triples) {[7 6 1] [5 3 2] [8 3 1] {3 array astore} 3 zipwith} [[[7 5 8] [6 3 3] [1 2 1]]] assert-stack
(sum zipwith should reuse elements) {[7 3] [8 3 1] {add} 2 zipwith} [[15 6 8]] assert-stack
(sum zipwith should allow scalar) {7 [8 3 1] {add} 2 zipwith} [[15 10 8]] assert-stack
(mapping the double over an array should double each element) {[5 3 2] {dup} each} [[5 5 3 3 2 2]] assert-stack
(mapping the double over an array should double each element) {[5 3 2] {dup add} each} [[10 6 4]] assert-stack
(mapping over and empty array should give an empty array) {[] {dup add} each} [[]] assert-stack
(longest-length works on scalars and arrays) {[2 5] 4 [5 3 2 1 8] [3 9 5] 4 longest-length} [5] assert-stack
(pervasive add works on scalar to array) {4 [3 9 5] +} [[7 13 9]] assert-stack
(pervasive add works on scalar to scalar) {[3 9 5] 4 +} [[7 13 9]] assert-stack
(pervasive add works on nested array to array) {[3 [9 5] 5] [1 5 3] +} [[4 [14 10] 8]] assert-stack
