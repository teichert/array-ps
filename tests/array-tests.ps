(+ works with scalars) {1 2 +} [3] assert-stack
(marray works with 0 items is empty) {mark marray} [[]] assert-stack
(marray works with more items has those items) {mark 5 2 7 3 marray} [[5 2 7 3]] assert-stack
(marray works with more items has those items) {mark 5 [2 7] 3 marray} [[5 [2 7] 3]] assert-stack
(range1 of 0 is an empty array) {0 range1} [[]] assert-stack
(range1 of 5 is [0 1 2 3 4]) {5 range1} [[0 1 2 3 4]] assert-stack
(counttomark gives index of the mark) {9 [4 3 counttomark 1 add index] } [9 [4 3 9]] assert-stack
% (each1 can make a new array with 2 added to each element) {[1 2 3] {2 +} 1 1 '} [[3 4 5]] assert-stack
% (each1 doesn't change the original array) {[1 2 3] dup {2 +} 1 1 '} [[1 2 3] [3 4 5]] assert-stack
% (each2 can make a new array that performs an elementwise sum of two other arrays)
%     {[1 2 3] [5 6 2] {+} "} [[6 8 5]] assert-stack
% (each2 can make a new array that performs an elementwise sum of two other arrays)
%     {[2 0 7] [5 6 3] {+} "} [[7 6 10]] assert-stack

% [/array 0 1] default-params { % thing-of-type-t-or-bottom-of-stack v1? v2? ... vn? [t d1 d2 ... dn] -- thing-of-type-t-or-bottom-of-stack v1 v2 ... vn
% }
% (pervasive add applies to scalars) {5 2 {add} pervasive exec} [7] assert-stack
% test-report
