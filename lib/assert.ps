% Test tracking variables
/test-count 0 def
/test-passed 0 def
/test-failed 0 def

% Report test results
/test-report {
  (Test Results:) =
  (  Total:  ) print test-count =
  (  Passed: ) print test-passed =
  (  Failed: ) print test-failed =
  test-failed 0 gt { 1 } { 0 } ifelse quit
} def

% assert-stack: executes code block and compares resulting stack with expected
/assert-stack {
	% stack: message code-block expected-stack
	/test-count test-count 1 add def
	
	% Save inputs
	/expected exch def
	/code-block exch def
	/message exch def
	
	% Execute the code block and capture the result
	mark code-block exec counttomark array astore /actual exch def
	cleartomark
	
	% Simple array comparison
	actual length expected length eq
	{
		% Same length, check elements
		true % start with true
		0 1 actual length 1 sub {
			% stack: result index
			dup actual exch get
			exch expected exch get
			eq and % combine with running result
		} for
	}{
		false % different lengths
	} ifelse
	
	{
		/test-passed test-passed 1 add def
	}{
		/test-failed test-failed 1 add def
		(Assertion failed: ) print message =
		(  Code:     ) print code-block ==
		(  Actual:   ) print actual ==
		(  Expected: ) print expected ==
		stop
	} ifelse
} def
