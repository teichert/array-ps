% Test tracking variables (exception: test framework needs global state)
/test-count 0 def
/test-passed 0 def
/test-failed 0 def

% test-report: ( -- )
% Report test results and exit with appropriate code
/test-report {
  (Test Results:) =                                % --
  (  Total:  ) print                               % --
  test-count =                                     % --
  (  Passed: ) print                               % --
  test-passed =                                    % --
  (  Failed: ) print                               % --
  test-failed =                                    % --
  test-failed 0 gt                                 % bool
  { 1 }                                            % 1
  { 0 }                                            % 0
  ifelse                                           % exit-code
  quit                                             % --
} def

% arrays-equal: ( array1 array2 -- bool )
% Compare two arrays for deep equality
/arrays-equal {
	2 copy                                          % array1 array2 array1 array2
	length exch length                              % array1 array2 len1 len2
	eq                                              % array1 array2 lengths-equal?
	{
		% Same length, check each element
		true                                        % array1 array2 result
		0                                          % array1 array2 result start-index
		1                                          % array1 array2 result start-index step
		3 index length 1 sub                       % array1 array2 result start-index step end-index
		{
			% Check element at index
			dup                                     % array1 array2 result index index
			4 index exch get                        % array1 array2 result index array1[index]
			exch                                    % array1 array2 result array1[index] index
			4 index exch get                        % array1 array2 result array1[index] array2[index]
			elements-equal                          % array1 array2 result elements-equal?
			and                                     % array1 array2 combined-result
		} for                                      % array1 array2 final-result
		exch pop exch pop                          % final-result
	}{
		% Different lengths
		pop pop false                              % false
	} ifelse                                       % result
} def

% elements-equal: ( element1 element2 -- bool )
% Compare two elements, handling arrays recursively
/elements-equal {
	2 copy                                          % elem1 elem2 elem1 elem2
	type /arraytype eq                              % elem1 elem2 elem1 is-array?
	exch type /arraytype eq                         % elem1 elem2 is-array? elem2-is-array?
	and                                             % elem1 elem2 both-arrays?
	{
		arrays-equal                               % result
	}{
		eq                                         % result
	} ifelse                                       % result
} def

% assert-stack: ( message code-block expected-array -- )
% Execute code block and compare resulting stack with expected array
/assert-stack {
	/test-count test-count 1 add def               % message code-block expected-array
	
	% Save inputs to local variables
	/expected exch def                              % message code-block
	/code-block exch def                           % message
	/message exch def                              % --
	
	% Execute code block and capture result as array
	mark                                           % mark
	code-block exec                                % mark ...results...
	counttomark                                    % mark ...results... count
	array astore                                   % actual-array
	/actual exch def                               % --
	cleartomark                                    % --
	
	% Compare arrays using deep equality
	actual                                          % actual
	expected                                        % actual expected
	arrays-equal                                    % comparison-result
	
	% Handle test result
	{
		% Test passed
		/test-passed test-passed 1 add def         % --
	}{
		% Test failed
		/test-failed test-failed 1 add def         % --
		(Assertion failed: ) print                 % --
		message =                                   % --
		(  Code:     ) print                        % --
		code-block ==                               % --
		(  Actual:   ) print                        % --
		actual ==                                   % --
		(  Expected: ) print                        % --
		expected ==                                 % --
		stop                                        % --
	} ifelse                                       % --
} def
