% Test tracking variables
/test-count 0 def
/test-passed 0 def
/test-failed 0 def

% Initialize test reporting
/test-init {
  /test-count 0 def
  /test-passed 0 def
  /test-failed 0 def
} def

% Auto-initialize when assert.ps is loaded
test-init

% Report test results
/test-report {
  (Test Results:) =
  (  Total:  ) print test-count =
  (  Passed: ) print test-passed =
  (  Failed: ) print test-failed =
  test-failed 0 gt { 1 } { 0 } ifelse quit
} def

/assert-equal {
	% stack: message actual expected
	/test-count test-count 1 add def
	1 index 2 index eq
	{ 
		/test-passed test-passed 1 add def
		pop pop pop % values are equal, remove all
	}{ 
		/test-failed test-failed 1 add def
		(Assertion failed: ) print 3 index =
		(  Actual:   ) print 2 index ==
		(  Expected: ) print 1 index ==
		pop pop pop
		stop
	} ifelse
} def


% deep-equal: compares two values, recursing into arrays
/deep-equal {
	% stack: actual expected
	2 copy eq { pop pop true exit } if
	% If both are arrays, compare lengths and elements
	2 copy type /arraytype eq exch type /arraytype eq and
	{
		% Both are arrays
		% Save copies
		2 copy length exch length eq
		{
			% Lengths equal, compare elements
			0 1 2 index length 1 sub {
				% stack: a b i
				3 index exch get 3 index exch get
				deep-equal not { pop pop pop pop false exit } if
			} for
			% All elements equal
			pop pop pop pop true
		}{
			% Lengths not equal
			pop pop pop pop false
		} ifelse
	}{
		% Not both arrays, not equal
		pop pop false
	} ifelse
} def
