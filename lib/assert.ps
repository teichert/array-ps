% Test tracking variables (exception: test framework needs global state)
/test-count 0 def
/test-passed 0 def
/test-failed 0 def

% test-report: ( -- )
% Report test results and exit with appropriate code
/test-report {
  (Test Results:) =                                % --
  (  Total:  ) print                               % --
  test-count =                                     % --
  (  Passed: ) print                               % --
  test-passed =                                    % --
  (  Failed: ) print                               % --
  test-failed =                                    % --
  test-failed 0 gt                                 % bool
  { 1 }                                            % 1
  { 0 }                                            % 0
  ifelse                                           % exit-code
  quit                                             % --
} def

% assert-stack: ( message code-block expected-array -- )
% Execute code block and compare resulting stack with expected array
/assert-stack {
	/test-count test-count 1 add def               % message code-block expected-array
	
	% Save inputs to local variables
	/expected exch def                              % message code-block
	/code-block exch def                           % message
	/message exch def                              % --
	
	% Execute code block and capture result as array
	mark                                           % mark
	code-block exec                                % mark ...results...
	counttomark                                    % mark ...results... count
	array astore                                   % actual-array
	/actual exch def                               % --
	cleartomark                                    % --
	
	% Compare array lengths
	actual length                                  % actual-length
	expected length                                % actual-length expected-length
	eq                                             % lengths-equal?
	{
		% Same length, check each element
		true                                        % result
		0                                          % result start-index
		1                                          % result start-index step
		actual length 1 sub                        % result start-index step end-index
		{
			% Check element at index
			dup                                     % result index index
			actual exch get                         % result index actual[index]
			exch                                    % result actual[index] index
			expected exch get                       % result actual[index] expected[index]
			eq                                      % result elements-equal?
			and                                     % combined-result
		} for                                      % final-result
	}{
		% Different lengths, comparison fails
		false                                      % false
	} ifelse                                       % comparison-result
	
	% Handle test result
	{
		% Test passed
		/test-passed test-passed 1 add def         % --
	}{
		% Test failed
		/test-failed test-failed 1 add def         % --
		(Assertion failed: ) print                 % --
		message =                                   % --
		(  Code:     ) print                        % --
		code-block ==                               % --
		(  Actual:   ) print                        % --
		actual ==                                   % --
		(  Expected: ) print                        % --
		expected ==                                 % --
		stop                                        % --
	} ifelse                                       % --
} def
