/debug { % message -- 
    pstack
    ==
} def

/items-at { % [a1 a2 ... ak] i -- a1[i] a2[i] ... ak[i]
    mark  % A i m
    3 -1 roll % i m A
    {  % i m ... aj
        dup type /arraytype eq {
            counttomark 1 add index % i m ... aj i
            1 index length mod
            get
        } if
    } forall % i m a1[i] ... ak[i]
    counttomark 2 add -2 roll pop pop % a1[i] ... ak[i]
} def 

/overk { % a1 a2 ... ak f k s n -- [a1[0] ... ak[0] a1[s-1] ... ak[s-1] f a1[s] ... ak[s] f ... a1[n] ... ak[n] f]
    2 index array  % a1 a2 ... ak f k s n A
    5 1 roll       % a1 a2 ... ak A f k s n
    2 index 5 add 4 roll % f k s n a1 a2 ak ... A
    astore [   % f k s n A [
    3 index 0 eq {
        5 index exec  % run f if s is 0
    } if
    0 1 counttomark 2 add index 1 sub % f k s n A [ ... 0 1 n-1
    { % f k s n A [ ... i
        counttomark 1 roll % [ i ... 
        counttomark 1 add index % ... A
        counttomark 1 sub index % ... A i
        items-at   % ... a1i a2i ... aki
        counttomark -1 roll
        counttomark 3 add index 1 sub % ... i s-1
        ge
        { counttomark 5 add index exec } if
    } for
    ]
    6 1 roll
    5 { pop } repeat
} bind def

/each { % [a1 a2 ... an] f -- [a1 f a2 f ... an f]
    1 1 3 index length    % a f 1 1 n
    overk
} bind def

/zipwith { % a1 a2 ... ak f k -- [a1[s1] ... ak[1] f ... a1[n] ... ak[n] f]
    2 index length zipwithn
} bind def

/zipwithn { % a1 a2 ... ak f k n -- [a1[s1] ... ak[1] f ... a1[n] ... ak[n] f]
    1 exch overk
} bind def

/reduce { % [a1 a2 ... an] f -- a1 f a2 f ... an f
    1 2 3 index length    % a f 1 2 n
    overk aload pop
} bind def

/xdebug { % f --
    dup debug
    exec
} bind def

/max {
    2 copy gt {
        pop
    } {
        exch pop
    } ifelse
} bind def

/longest-length { % a1 ... ak k -- length of longest
    array astore {
        dup type /arraytype ne {
            pop 1
        } {
            length
        } ifelse
    } each
    {max} reduce
} bind def

/no-arrays { % v1 ... vk k -- bool
    array astore {type /arraytype ne} each
    {and} reduce
} bind def

/rank-polymorphic { % v1 ... vk f k - effects of f
    dup 2 add copy exch pop no-arrays { % v1 ... vk f k
        pop exec
    } {
        dup 2 add copy exch pop  % ... v1 ... vk k
        longest-length           % v1 ... vk f k n
        3 copy pop /rank-polymorphic cvx % v1 ... vk f k n f k rank-polymorphic
        3 array astore cvx       % v1 ... vk f k n {f k rank-polymorphic}
        4 -1 roll pop            % v1 ... vk k n {f k rank-polymorphic}
        3 1 roll                 % v1 ... vk {f k rank-polymorphic} k n
        zipwithn
    } ifelse
} def

/+ {
    {add} 2 rank-polymorphic
} bind def
